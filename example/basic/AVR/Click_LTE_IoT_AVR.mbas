'
'Example for LTE_IoT Click
'
'    Date          : Nov 2017.
'    Author        : MikroE Team
'
'Test configuration AVR :
'    
'    MCU              : ATMEGA32
'    Dev. Board       : EasyAVR v7 
'    AVR Compiler ver : v7.0.1.0
'
'---
'
'Description :
'
'The application is composed of three sections :
'
'- System Initialization - Initializes all necessary GPIO pins, UART used for
'the communcation with LTE IOT module and UART used for infromation logging
'- Application Initialization - Initializes driver, power on module and sends few
'command for the default module configuration. 
'Create UDP socket and sending message to UDP socket.
'
'
'
program Click_LTE_IoT_FT90x

include Click_LTE_IoT_types
include Click_LTE_IoT_config
include Click_LTE_IoT_timer

dim
    ' COMMANDS
    _LTEIOT_AT        as string[5]         
    _LTEIOT_ATE1      as string[10]      
    _LTEIOT_AT_CMEE   as string[15]   
    _LTEIOT_AT_CGATT  as string[15]  
    _LTEIOT_AT_CEREG  as string[15]  
    _LTEIOT_AT_COPS   as string[15]   
    _LTEIOT_AT_COPS_1 as string[15] 
    _LTEIOT_AT_USOCR  as string[15]  
    _LTEIOT_AT_USOST  as string[70]  
    _LTEIOT_AT_USORF  as string[15]  
    _LTEIOT_AT_USOCL  as string[15]  

sub procedure lteiot_default_handler(dim rsp as ^uint8_t, dim evArgs as ^uint8_t) 
dim
    ptr_rsp as ^char
    
    ptr_rsp = rsp + 2
    mikrobus_logWrite( ptr_rsp - 2, _LOG_TEXT )
    
end sub

sub procedure systemInit() 

    _LTEIOT_AT        = "AT"
    _LTEIOT_ATE1      = "ATE1"
    _LTEIOT_AT_CMEE   = "AT+CMEE=2"
    _LTEIOT_AT_CGATT  = "AT+CGATT?"
    _LTEIOT_AT_CEREG  = "AT+CEREG?"
    _LTEIOT_AT_COPS   = "AT+COPS=0"
    _LTEIOT_AT_COPS_1 = "AT+COPS?"
    _LTEIOT_AT_USOCR  = "AT+USOCR=17"
    _LTEIOT_AT_USOST  = "AT+USOST=0,"+ Chr(34) +"195.34.89.241"+ Chr(34) +",7,13,"+ Chr(34) +"TestNumberOne"+ Chr(34) +""
    _LTEIOT_AT_USORF  = "AT+USORF=0,13"
    _LTEIOT_AT_USOCL  = "AT+USOCL=0"


    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_AN_PIN, _GPIO_OUTPUT )
    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_PWM_PIN, _GPIO_INPUT )
    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT )
    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_OUTPUT )
    mikrobus_gpioInit( _MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT )    

    mikrobus_uartInit(_MIKROBUS1, @_LTEIOT_UART_CFG[0]) 
    mikrobus_logInit(_LOG_USBUART, 115200) 

end sub

sub procedure applicationInit() 

' TIMER INIT
    lteiot_configTimer()

' DRIVER INIT
    lteiot_uartDriverInit(T_LTEIOT_P(@_MIKROBUS1_GPIO), T_LTEIOT_P(@_MIKROBUS1_UART)) 
    lteiot_coreInit(@lteiot_default_handler, 1500)

' MODULE POWER ON
    lteiot_hfcEnable(true) 
    lteiot_modulePower(true) 

' MODULE INIT
    lteiot_cmdSingle( @_LTEIOT_AT[0] )
    Delay_1sec()
    lteiot_cmdSingle( @_LTEIOT_ATE1[0] )
    Delay_1sec()
    ' Opening a UDP socket 
    ' Commmand : AT+CMEE=2 - Enables the cellular module to report verbose error result codes
    lteiot_cmdSingle( @_LTEIOT_AT_CMEE[0] )
    Delay_1sec()
    ' Commmand : AT+CGATT? - Verifies the SARA-R4 module is attached to the network.
    lteiot_cmdSingle( @_LTEIOT_AT_CGATT[0] )
    Delay_1sec()
    ' Commmand : AT+CEREG? - Verify the network registration status.
    lteiot_cmdSingle( @_LTEIOT_AT_CEREG[0] )
    Delay_1sec()
    ' Commmand : AT+COPS=0 - Register the module on the network
    lteiot_cmdSingle( @_LTEIOT_AT_COPS[0] )
    Delay_1sec()
    ' Commmand : AT+COPS? - Read the operator name
    lteiot_cmdSingle( @_LTEIOT_AT_COPS_1[0] )
    Delay_1sec()
    ' Commmand : AT+USOCR=17 - Create a UDP socket.
    lteiot_cmdSingle( @_LTEIOT_AT_USOCR[0] )
    Delay_1sec()
    ' Commmand : AT+USOST=0,"IP address",port,number character,"message" - Connecting and storing text on the server.
    lteiot_cmdSingle( @_LTEIOT_AT_USOST[0] )
    Delay_1sec()
    ' Commmand : AT+USORF=0,number character - Reading the message from the server
    lteiot_cmdSingle( @_LTEIOT_AT_USORF[0] )
    Delay_1sec()
    ' Commmand : AT+USOCL=0 - Closing the socket.
    lteiot_cmdSingle( @_LTEIOT_AT_USOCL[0] )

end sub

sub procedure applicationTask() 

    lteiot_process() 

end sub

main :

    systemInit() 
    applicationInit() 
    while (1) 
        applicationTask() 
    wend

end.